/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vista;

import Controlador.Controlador;
import DTO.FichaJuegoDTO;
import DTO.GrupoDTO;
import DTO.JuegoDTO;
import Modelo.IModelo;
import Vista.Objetos.FichaUI;
import Vista.Objetos.JugadorUI;
import Vista.Objetos.ManoUI;
import Vista.Objetos.MazoUI;
import Vista.Objetos.TableroUI;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Point;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JPanel;

/**
 *
 * @author benja
 */
public class VistaTablero extends javax.swing.JFrame implements Observador {

    private Controlador control;
    private boolean fichasInicializadas = false;
    private TableroUI tableroUI;
    private ManoUI manoUI;

    /**
     * Creates new form VistaTableross
     */
    public VistaTablero(Controlador control) {
        this.control = control;
        this.setSize(920, 550);
        this.setTitle("Rummy Juego");
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GUIjuego = new javax.swing.JPanel();
        btnFinalizarTurno = new javax.swing.JLabel();
        panelFichasArmadas = new javax.swing.JPanel();
        fondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        GUIjuego.setBackground(new java.awt.Color(0, 0, 0));
        GUIjuego.setLayout(null);

        btnFinalizarTurno.setForeground(new java.awt.Color(255, 51, 51));
        btnFinalizarTurno.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnFinalizarTurno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/finalizarTurno.png"))); // NOI18N
        btnFinalizarTurno.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnFinalizarTurno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnFinalizarTurnoMouseClicked(evt);
            }
        });
        GUIjuego.add(btnFinalizarTurno);
        btnFinalizarTurno.setBounds(790, 260, 100, 100);

        panelFichasArmadas.setBackground(new java.awt.Color(23, 57, 134));

        javax.swing.GroupLayout panelFichasArmadasLayout = new javax.swing.GroupLayout(panelFichasArmadas);
        panelFichasArmadas.setLayout(panelFichasArmadasLayout);
        panelFichasArmadasLayout.setHorizontalGroup(
            panelFichasArmadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );
        panelFichasArmadasLayout.setVerticalGroup(
            panelFichasArmadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 120, Short.MAX_VALUE)
        );

        GUIjuego.add(panelFichasArmadas);
        panelFichasArmadas.setBounds(130, 0, 640, 120);

        fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fondoRummy.jpg"))); // NOI18N
        fondo.setText("jLabel1");
        GUIjuego.add(fondo);
        fondo.setBounds(0, 0, 900, 500);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(GUIjuego, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(GUIjuego, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFinalizarTurnoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFinalizarTurnoMouseClicked
        control.terminarTurno();
    }//GEN-LAST:event_btnFinalizarTurnoMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel GUIjuego;
    private javax.swing.JLabel btnFinalizarTurno;
    private javax.swing.JLabel fondo;
    private javax.swing.JPanel panelFichasArmadas;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actualiza(IModelo modelo, TipoEvento tipoEvento) {

        switch (tipoEvento) {
            case INCIALIZAR_FICHAS:
                inicializarFichasMano(modelo);
                break;
            case REPINTAR_MANO:
                repintarMano(modelo, control, manoUI);
                break;
            case ACTUALIZAR_TABLERO:
                pintarFichasTablero(modelo, control);
                // L√≥gica para actualizar el tablero
                break;
        }
    }

    public void pintarFichasTablero(IModelo modelo, Controlador controlador) {
        JuegoDTO juego = modelo.getTablero();
        List<GrupoDTO> grupos = juego.getGruposEnTablero();

        // Devolver fichas a la mano si no est√°n en ning√∫n grupo
        //devolverFichasAMano(modelo, grupos);
        // Limpiar panel antes de pintar
        panelFichasArmadas.removeAll();
        panelFichasArmadas.setBackground(new Color(23, 57, 134));
        panelFichasArmadas.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 10));

        // 3Ô∏è‚É£ Recorrer cada grupo
        for (GrupoDTO grupoDTO : grupos) {
            // Ignorar grupos no establecidos
            System.out.println(grupoDTO.getTipo());
            if (grupoDTO.getTipo().equals("No establecido")) {
                continue; // salta a la siguiente iteraci√≥n
            }

            // Crear un panel para el grupo
            JPanel panelGrupo = new JPanel();
            panelGrupo.setBorder(BorderFactory.createTitledBorder(grupoDTO.getTipo()));
            panelGrupo.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));

            // Recorrer las fichas del grupo
            for (FichaJuegoDTO fichaDTO : grupoDTO.getFichasGrupo()) {
                // Crear un FichaUI en lugar de JButton
                FichaUI fichaUI = new FichaUI(
                        fichaDTO.getIdFicha(),
                        fichaDTO.getNumeroFicha(),
                        fichaDTO.getColor(),
                        fichaDTO.isComodin(),
                        controlador, this
                );

                fichaUI.setPreferredSize(new Dimension(20, 50));
                panelGrupo.add(fichaUI);

                // üîπ Eliminar la ficha de la mano si existe all√≠
                modelo.getMano().removeIf(f -> f.getIdFicha() == fichaDTO.getIdFicha());
            }

            // Agregar el panel del grupo al tablero
            panelFichasArmadas.add(panelGrupo);
        }

        // 4Ô∏è‚É£ Refrescar la vista
        panelFichasArmadas.revalidate();
        panelFichasArmadas.repaint();
    }

    public void inicializarFichasMano(IModelo modelo) {
        List<FichaJuegoDTO> fichasMano = modelo.getMano();
        for (FichaJuegoDTO fichaJuegoDTO : fichasMano) {
            System.out.println("Ficha: " + fichaJuegoDTO);
        }
        // 1Ô∏è‚É£ Eliminar fichas antiguas de la mano
        for (Component c : GUIjuego.getComponents()) {
            if (c instanceof FichaUI && ((FichaUI) c).getOrigen() == FichaUI.Origen.MANO) {
                GUIjuego.remove(c);
            }
        }
        String rutaImagen = "C:\\Users\\Sebastian Moreno\\Desktop\\Diagrama\\logoEcos.jpg";

        try {
            // Convierte la cadena de texto de la ruta en un objeto Path
            Path path = new File(rutaImagen).toPath();

            // Lee todos los bytes del archivo
            byte[] imagenAvatarBytes = Files.readAllBytes(path);
            System.out.println("Imagen cargada exitosamente. Tama√±o: " + imagenAvatarBytes.length + " bytes.");

            // 2. Crea los objetos JugadorUI, pas√°ndoles la misma imagen en bytes ya cargada
            JugadorUI jugador1 = new JugadorUI("Sebastian", 7, imagenAvatarBytes);
            jugador1.setSize(150, 150);
            jugador1.setLocation(-10, -10);
            GUIjuego.add(jugador1);
            GUIjuego.setComponentZOrder(jugador1, GUIjuego.getComponentCount() - 2);

            JugadorUI jugador2 = new JugadorUI("Benjamin", 15, imagenAvatarBytes);
            jugador2.setSize(150, 150);
            jugador2.setLocation(-10, 360);
            GUIjuego.add(jugador2);
            GUIjuego.setComponentZOrder(jugador2, GUIjuego.getComponentCount() - 2);

            JugadorUI jugador3 = new JugadorUI("Luciano", 10, imagenAvatarBytes);
            jugador3.setSize(150, 150);
            jugador3.setLocation(760, -10);
            GUIjuego.add(jugador3);
            GUIjuego.setComponentZOrder(jugador3, GUIjuego.getComponentCount() - 2);

            JugadorUI jugador4 = new JugadorUI("Mr.Fitch", 5, imagenAvatarBytes);
            jugador4.setSize(150, 150);
            jugador4.setLocation(760, 360);
            GUIjuego.add(jugador4);
            GUIjuego.setComponentZOrder(jugador4, GUIjuego.getComponentCount() - 2);

        } catch (IOException e) {
            System.err.println("Error: No se pudo encontrar o leer el archivo de imagen en la ruta: " + rutaImagen);
            e.printStackTrace();
        }

        //Crear Mano
        manoUI = new ManoUI();
        manoUI.setLocation(160, 380);
        manoUI.setSize(580, 120);
        GUIjuego.add(manoUI);
        GUIjuego.setComponentZOrder(manoUI, GUIjuego.getComponentCount() - 2);

        //Crear Tablero
        tableroUI = new TableroUI();
        tableroUI.setLocation(130, 130);
        tableroUI.setSize(640, 242);
        tableroUI.setOpaque(false);
        GUIjuego.add(tableroUI);
        GUIjuego.setComponentZOrder(tableroUI, GUIjuego.getComponentCount() - 2);

        // 2Ô∏è‚É£ Posici√≥n inicial relativa al panelMano
        Point posPanel = manoUI.getLocation(); // posici√≥n dentro de GUIjuego
        int xPos = posPanel.x + 10;
        int yPos = posPanel.y + 10;

        // 3Ô∏è‚É£ Agregar fichas
        for (FichaJuegoDTO fichaDTO : fichasMano) {
            FichaUI fichaUI = new FichaUI(
                    fichaDTO.getIdFicha(),
                    fichaDTO.getNumeroFicha(),
                    fichaDTO.getColor(),
                    fichaDTO.isComodin(),
                    control, this
            );
            fichaUI.setOrigen(FichaUI.Origen.MANO);
            fichaUI.setSize(25, 45);
            fichaUI.setLocation(xPos, yPos);
            fichaUI.setOpaque(false);

            manoUI.add(fichaUI);
            manoUI.setComponentZOrder(fichaUI, 0);

            xPos += 40; // separaci√≥n entre fichas
        }

        MazoUI mazoUI = new MazoUI("17", control);
        mazoUI.setLocation(800, 150);
        mazoUI.setSize(70, 90);
        mazoUI.setOpaque(false);
        GUIjuego.add(mazoUI);
        GUIjuego.setComponentZOrder(mazoUI, GUIjuego.getComponentCount() - 2);

        // 4Ô∏è‚É£ Actualizar GUI
        GUIjuego.revalidate();
        GUIjuego.repaint();
    }

    public TableroUI getPanelTablero() {
        return tableroUI;
    }

    public void repintarMano(IModelo modelo, Controlador controlador, ManoUI manoUI) {
        // 1Ô∏è‚É£ Limpiar el panel de la mano para evitar duplicados
        manoUI.removeAll();

        // 2Ô∏è‚É£ Obtener las fichas de la mano del modelo
        List<FichaJuegoDTO> fichasMano = modelo.getMano();

        // 3Ô∏è‚É£ Posici√≥n inicial de las fichas dentro del panel de la mano
        int xPos = 10;
        int yPos = 10;

        // 4Ô∏è‚É£ Dibujar cada ficha en la mano
        for (FichaJuegoDTO fichaDTO : fichasMano) {
            FichaUI fichaUI = new FichaUI(
                    fichaDTO.getIdFicha(),
                    fichaDTO.getNumeroFicha(),
                    fichaDTO.getColor(),
                    fichaDTO.isComodin(),
                    controlador,
                    this
            );

            fichaUI.setOrigen(FichaUI.Origen.MANO);
            fichaUI.setSize(25, 45); // Asume el tama√±o de la ficha
            fichaUI.setLocation(xPos, yPos);
            fichaUI.setOpaque(false);

            manoUI.add(fichaUI);

            xPos += 40; // Ajusta el espaciado
        }

        // 5Ô∏è‚É£ Refrescar el panel para mostrar los cambios
        manoUI.revalidate();
        manoUI.repaint();
    }
}
